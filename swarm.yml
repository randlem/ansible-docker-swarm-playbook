- hosts:
   - manager
   - replica
  tasks:
    #$ docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise 172.30.0.161:4000 consul://172.30.0.161:8500
    - name: Run docker manager
      docker:
        name: swarm-manager
        image: swarm
        command: "manage -H :4000 --replication --advertise {{private_ip}}:4000 consul://{{private_ip}}:8500"
        env: 
          SERVICE_IGNORE: "yes"
        state: started
        ports:
          - "4000:4000"
        expose:
          - 4000
        restart_policy: on-failure
      tags:
        - swarm

- hosts:
   - node
  tasks:
    #$ docker run -d swarm join --advertise=172.30.0.69:2375 consul://172.30.0.161:8500
    - name: Run docker nodes
      docker:
        name: swarm-node
        image: swarm
        command: "join --advertise {{private_ip}}:2375 consul://{{private_ip}}:8500"
        env: 
          SERVICE_IGNORE: "yes"
        state: started
        restart_policy: on-failure
      tags:
        - swarm
    - name: run registrator
      docker:
        name: registrator
        image: gliderlabs/registrator:latest
        state: started
        restart_policy: on-failure
        command: "-internal consul://consul.service.consul:8500"
        volumes:
          - "/var/run/docker.sock:/tmp/docker.sock"
        net: host
      tags:
        - registrator

# reboot the hosts when required
#- hosts:
#    - all
#  tasks:
#    - name: restart machine
#      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
#      async: 1
#      poll: 0
#      become: yes
#      become_user: root
#      become_method: sudo
#      ignore_errors: true
#
#    - name: waiting for server to come back
#      local_action: wait_for host={{ inventory_hostname }} state=started delay=30 timeout=300